# correlation with target?
data %>% corPlot()
par(mar = c(1,1,1,1))
data %>% corPlot()
# correlation with target?
par(mar = c(1,1,1,1))
data %>% corPlot()
# correlation with target?
par(mar = c(1,1,1,1))
data %>% corPlot(main = 'whole data set')
data.f1 %>% cor.plot(main = 'data with chas == 1')
data.f0 %>% cor.plot(main = 'data with chas == 0')
# correlation with target?
par(mar = c(1,1,1,1))
data %>% corPlot(main = 'whole data set')
data.f1 %>% cor.plot(main = 'data with chas == 1')
data.f0 %>% cor.plot(main = 'data with chas == 0')
library(MASS)
data.lm <- lm(target ~ ., data = data)
summary(data.lm)
plot(data.lm)
library(car)
install.packages('car')
library(car)
avPlot(data.lm)
avPlots(data.lm)
boxCox(data.lm)
boxCox()
?boxCox()
data.lm2 <- lm(target~nox+age+rad+medv, data = data)
summary(data.lm2)
data['target']
#data.lm2 <- lm(log(target)~nox+age+rad+medv, data = data)
#summary(data.lm2)
data.lm2 <- lm(log(target)~., data = data)
#data.lm2 <- lm(log(target)~nox+age+rad+medv, data = data)
#summary(data.lm2)
data.lm2 <- lm(log10(target)~., data = data)
log10(data['target'])
#data.lm2 <- lm(log(target)~nox+age+rad+medv, data = data)
#summary(data.lm2)
data.lm2 <- glm(target~., data = data, family = 'binomial')
summary(data.lm2)
boxcox(target~., data = data)
boxcox
?boxcox
boxcox(target~., data = data, lambda = seq(0,1,1/10))
boxcox(target~., data = data, lambda = seq(0.1,1,1/10))
boxcox(target+1~., data = data, lambda = seq(0,1,1/10))
boxcox(target+1~., data = data)
boxcox(target+1~., data = data)$coef
data.bc = boxcox(target+1~., data = data)
data.bc$x[which.max(bc$y)]
data.bc$x[which.max(data.bc$y)]
data.lm2 <- glm(I(target^(-0.14)~., data = data, family = 'binomial')
summary(data.lm2)
data.lm2 <- glm(I(target^(-0.14))~., data = data, family = 'binomial')
data.lm2 <- lm(I(target^(-0.14))~., data = data)
data.lm2 <- lm(I((target+1)^(-0.14))~., data = data)
summary(data.lm2)
plot(data.lm2)
pairs(data)
data.sub <- data %>% select(c('nox','rm', 'age', 'lstat','medv'))
data.sub <- data %>% select(c(nox,rm, age, lstat,medv))
data.sub <- data %>% select(nox,rm, age, lstat,medv)
data.sub <- data[,c(nox,rm, age, lstat,medv)]
data.sub <- data[,c('nox','rm', 'age', 'lstat','medv')]
setwd("~/Desktop/R/621/hw3")
library(reshape2)
library(ggplot2)
library(dplyr)
library(psych)
library(MASS)
library(car)
# load dataset
data <- read.csv('crime-training-data_modified.csv')
head(data)
# number of variables in total
names(data) %>% length()
# brief summary
summary(data)
# make box plot for all variables
data.m <- melt(data, id.vars = 'target')
head(data.m)
ggplot(data.m, aes(x = variable, y = value)) + geom_boxplot() + facet_wrap(~ variable, scales = 'free')
# data situation where chas == 1
data.f1 <- data %>% filter(chas == 1)
data.mf0 <- data.f1 %>% melt(id.var = 'target')
ggplot(data.mf0, aes(x = variable, y = value)) + geom_boxplot() + facet_wrap(~ variable, scales = 'free')
# data situation where chas != 1
data.f0 <- data %>% filter(chas == 0)
data.mf0 <- data.f0 %>% melt(id.var = 'target')
ggplot(data.mf0, aes(x = variable, y = value)) + geom_boxplot() + facet_wrap(~ variable, scales = 'free')
# correlation between predictors and response
par(mar = c(1,1,1,1))
data %>% corPlot(main = 'whole data set')
library(reshape2)
library(ggplot2)
library(dplyr)
library(psych)
library(MASS)
library(car)
# load dataset
data <- read.csv('crime-training-data_modified.csv')
head(data)
# number of variables in total
names(data) %>% length()
# brief summary
summary(data)
# make box plot for all variables
data.m <- melt(data, id.vars = 'target')
head(data.m)
ggplot(data.m, aes(x = variable, y = value)) + geom_boxplot() + facet_wrap(~ variable, scales = 'free')
# data situation where chas == 1
data.f1 <- data %>% filter(chas == 1)
data.mf0 <- data.f1 %>% melt(id.var = 'target')
ggplot(data.mf0, aes(x = variable, y = value)) + geom_boxplot() + facet_wrap(~ variable, scales = 'free')
# data situation where chas != 1
data.f0 <- data %>% filter(chas == 0)
data.mf0 <- data.f0 %>% melt(id.var = 'target')
ggplot(data.mf0, aes(x = variable, y = value)) + geom_boxplot() + facet_wrap(~ variable, scales = 'free')
# correlation between predictors and response
par(mar = c(1,1,1,1))
data %>% corPlot(main = 'whole data set')
# correlation between predictors and response
par(mar = c(1,1,1,1))
data %>% corPlot(main = 'whole data set')
data.f1 %>% cor.plot(main = 'suburb border the Charles River')
data.f0 %>% cor.plot(main = 'suburb border NOT Charles River')
# correlation between predictors
pairs(data)
data.sub <- data[,c('nox','rm', 'age', 'lstat','medv')]
boxcox(data.sub)
sub.lm <- lm(target ~ ., data = data.sub)
data.sub <- data[,c('nox','rm', 'age', 'lstat','medv', 'target')]
sub.lm <- lm(target ~ ., data = data.sub)
summary(sub.lm)
boxcox(data.lm)
data.lm <- lm(target ~ ., data = data)
summary(data.lm)
plot(data.lm)
data.bc = boxcox(target+1~., data = data)
data.bc$x[which.max(data.bc$y)]
lamda <- data.bc$x[which.max(data.bc$y)]
# apply box-cox transformation
data.bc = boxcox(target+1~., data = data)
# obtain lambda value
lamda <- data.bc$x[which.max(data.bc$y)]
# apply power back to the model
back_transform <- function(y, lamda = 0){
if(lamda == 0){
log(y)
}else{
(y^lamda - 1)/lamda
}
data['target.t'] = back_transform(data$target, lamda)
hist(data$target.t)
hist(data$target.t, breaks = 12)
hist(data$target.t, breaks = 12); rug(data$target.t)
hist(data$target)
# re-run linear mode with transformation
summary(lm(target.t ~ . - target, data = data))
# re-run linear mode with transformation
summary(lm(target.t ~ ., -target, data = data))
# re-run linear mode with transformation
summary(lm(target.t ~ . -target, data = data))
hist(data$target.t)
back_transform <- function(y, lamda = 0){
if(lamda == 0){
log(y)
}else{
(y^lamda)/lamda
}
data['target.t'] = back_transform(data$target, lamda)
hist(data$target.t)
# re-run linear mode with transformation
summary(lm(target.t ~ . - target, data = data))
# re-run linear mode with transformation
lm(target.t ~ . - target, data = data)
back_transform <- function(y, lamda = 0){
if(lamda == 0){
log(y)
}else{
((y+1)^lamda)/lamda
}
data['target.t'] = back_transform(data$target, lamda)
hist(data$target.t)
# re-run linear mode with transformation
lm(target.t ~ . - target, data = data)
powerTransform(data.lm)
boxcox(data.lm)
powerTransform(data.lm)
hist(data$zn)
hist(data$indus)
attach(data)
hist(nox)
hist(rm)
hist(age)
hist(dis)
hist(rad)
hist(tax)
hist(ptratio)
hist(lstat)
hist(medv)
ggplot(data.m, aes(x = variable, y = value)) + geom_histogram() + facet_wrap(~variable, scale = 'free')
ggplot(data.m, aes(x = variable)) + geom_histogram() + facet_wrap(~variable, scale = 'free')
hist(data)
install.packages('Hmisc')
library(Hmisc)
hist.data.frame(data)
# histogram of all columns
hist.data.frame(data)
# histogram of all columns
par(mar = c(1,1,1,1))
hist.data.frame(data)
# transform zn
boxcox(lm(data$zn ~ 1, data))
attach(data)
# transform zn
boxcox(lm(nox ~ 1, data))
# transform zn
nox.t <- boxcox(lm(nox ~ 1, data))
nox.pow <- nox.t$x[which.max(nox.t$y)]
attach(data)
# transform zn
nox.bc <- boxcox(lm(nox ~ 1, data))
nox.pow <- nox.bc$x[which.max(nox.bc$y)]
data['nox.t'] <- back_transform(nox, nox.pow)
indus.bc <- boxcox(lm(indus ~ 1, data))
indus.pow <- indus.bc$x[which.max(indus.bc$y)]
data['indus.t'] <- back_transform(indus, indus.pow)
# transform nox
nox.bc <- boxcox(lm(nox ~ 1, data))
age.bc <- boxcox(lm(age ~ 1, data))
age.pow <- age.bc$x[which.max(age.bc$y)]
data['age.t'] <- back_transform(age, age.pow)
dis.bc <- boxcox(lm(dis ~ 1, data))
dis.pow <- dis.bc$x[which.max(dis.bc$y)]
data['dis.t'] <- back_transform(dis, dis.pow)
unique(nox.t, bctrans(nox))
bctrans <- function(y){
bc <- boxcox(lm(y~1, data))
pow <- bc$x[which.max(bc$y)]
return(back_transform(y, pow))
}
back_transform <- function(y, lamda = 0){
if(lamda == 0L){
log(y)
}else{
(y^lamda - 1) / lambda
}
unique(nox.t, bctrans(nox))
attach(data)
unique(nox.t, bctrans(nox))
unique(data$nox.t, bctrans(data$nox))
nox.t == bctrans(nox)
bctrans(data$nox)
tax.bc <- boxcox(lm(tax ~ 1, data))
tax.pow <- tax.bc$x[which.max(tax.bc$y)]
data['tax.t'] <- back_transform(tax, tax.pow)
tax.pow
back_transform <- function(y, lamda = 0){
if(lamda == 0L){
log(y)
}else{
(y^lamda-1)/lamda
}
nox.pow <- nox.bc$x[which.max(nox.bc$y)]
nox.bc <- boxcox(lm(nox ~ 1, data))
nox.pow <- nox.bc$x[which.max(nox.bc$y)]
data['nox.t'] <- back_transform(nox, nox.pow)
indus.bc <- boxcox(lm(indus ~ 1, data))
indus.pow <- indus.bc$x[which.max(indus.bc$y)]
data['indus.t'] <- back_transform(indus, indus.pow)
age.bc <- boxcox(lm(age ~ 1, data))
age.pow <- age.bc$x[which.max(age.bc$y)]
data['age.t'] <- back_transform(age, age.pow)
dis.bc <- boxcox(lm(dis ~ 1, data))
dis.pow <- dis.bc$x[which.max(dis.bc$y)]
data['dis.t'] <- back_transform(dis, dis.pow)
dis.bc <- boxcox(lm(dis ~ 1, data))
dis.pow <- dis.bc$x[which.max(dis.bc$y)]
data['dis.t'] <- back_transform(dis, dis.pow)
tax.bc <- boxcox(lm(tax ~ 1, data))
tax.pow <- tax.bc$x[which.max(tax.bc$y)]
data['tax.t'] <- back_transform(tax, tax.pow)
hist(age.t)
View(dis.bc)
hist(dis.t)
View(data.sub)
hist(rad)
View(data.mf0)
hist(tax.t)
tax.bc <- boxcox(lm(tax ~ 1, data))
tax.pow <- tax.bc$x[which.max(tax.bc$y)]
data['tax.t'] <- back_transform(tax, tax.pow)
hist(tax.t)
View(back_transform)
data <- read.csv('crime-training-data_modified.csv')
head(data)
glm(target ~ . , data, family = 'binomial')
avPlot(glm(target ~ . , data, family = 'binomial'))
avPlot(glm(target ~ . , data, family = binomial))
avPlot(glm(target ~ . , data = data, family = binomial))
av.plots(glm(target ~ . , data = data, family = binomial))
avPlots(glm(target ~ . , data = data, family = binomial))
logit1 <- glm(target ~ . , data = data, family = binomial)
avPlots(logit1)
logit1 <- glm(target ~ . , data = data, family = binomial)
avPlots(logit1)
summary(logit1)
subset <- data.frame()
attach(data)
subset <- data.frame()
# transform nox
nox.bc <- boxcox(lm(nox ~ 1, data))
nox.pow <- nox.bc$x[which.max(nox.bc$y)]
nox.t <- back_transform(nox, nox.pow)
# transform age
age.bc <- boxcox(lm(age ~ 1, data))
age.pow <- age.bc$x[which.max(age.bc$y)]
age.t <- back_transform(age, age.pow)
# transform dis
dis.bc <- boxcox(lm(dis ~ 1, data))
dis.pow <- dis.bc$x[which.max(dis.bc$y)]
dis.t <- back_transform(dis, dis.pow)
# transform rad
rad.bc <- boxcox(lm(rad ~ 1, data))
rad.pow <- rad.bc$x[which.max(rad.bc$y)]
rad.t <- back_transform(rad, rad.pow)
# transform tax
tax.bc <- boxcox(lm(tax ~ 1, data))
tax.pow <- tax.bc$x[which.max(tax.bc$y)]
tax.t <- back_transform(tax, tax.pow)
# transform ptratio
ptratio.bc <- boxcox(lm(ptratio ~ 1, data))
ptratio.pow <- ptratio.bc$x[which.max(ptratio.bc$y)]
ptratio.t <- back_transform(ptratio, ptratio.pow)
# transform medv
medv.bc <- boxcox(lm(medv ~ 1, data))
medv.pow <- medv.bc$x[which.max(medv.bc$y)]
medv.t <- back_transform(medv, medv.pow)
subset <- cbind(subset, c(nox.t, age.t, dis.t, rad.t, tax.t, ptratio.t, medv.t))
medv.bc <- boxcox(lm(medv ~ 1, data))
medv.pow <- medv.bc$x[which.max(medv.bc$y)]
medv.t <- back_transform(medv, medv.pow)
subset <- cbind(subset, c(nox.t, age.t, dis.t, rad.t, tax.t, ptratio.t, medv.t))
cbind(subset, nox.t)
subset <- data.frame(nrow=466)
View(subset)
subset <- data['target']
subset <- cbind(subset, c(nox.t, age.t, dis.t, rad.t, tax.t, ptratio.t, medv.t))
View(subset)
subset <- data.frame(target, nox.t, age.t, dis.t, rad.t, tax.t, ptratio.t, medv.t)
View(subset)
logit2 <- glm(target ~ ., data = subset)
summary(logit2)
logit2 <- glm(target ~ ., data = subset, family = binomial)
summary(logit2)
probit3 <- glm(target ~ ., data = subset, family = "probit")
probit3 <- glm(target ~ ., data = subset, family = binomial(link = 'probit'))
summary(probit3)
# diagnostic plot
plot(logit1)
plot(logit2)
plot(probit3)
knitr::opts_chunk$set(echo = FALSE)
library("corrplot")
library("MASS")
#library("car")
train_raw_df <- read.csv("https://raw.githubusercontent.com/ezaccountz/DATA_621/main/HW1/moneyball-training-data.csv")
test_raw_df <- read.csv("https://raw.githubusercontent.com/ezaccountz/DATA_621/main/HW1/moneyball-evaluation-data.csv")
train_raw_df$INDEX <- NULL
test_raw_df$INDEX <- NULL
summary(train_raw_df)
par(mfrow=c(4,4))
for(i in c(1:16)) {
boxplot(train_raw_df[,i],main=colnames(train_raw_df)[i])
}
sapply(train_raw_df,function(x)sum(is.na(x)))/nrow(train_raw_df)
corrplot(cor(train_raw_df, use = "na.or.complete"), method = 'number', type = 'lower', diag = FALSE, tl.srt = 0.1)
corr_table <- data.frame(correlation_with_TARGET_WINS = round(cor(train_raw_df, use = "na.or.complete"),4)[-1,"TARGET_WINS"])
corr_table$Theoretical_Effect <- c("Positive","Positive","Positive","Positive","Positive","Negative","Positive","Negative","Positive","Negative","Negative","Negative","Positive","Negative","Positive")
corr_table
par(mfrow=c(4,4))
for(i in c(1:16)) {
plot(density(train_raw_df[,i],na.rm=TRUE),main=colnames(train_raw_df)[i])
}
train_prepared_df <- train_raw_df
train_prepared_df$TEAM_BATTING_HBP <- NULL
train_prepared_df$TEAM_PITCHING_HR <- NULL
train_prepared_df$TEAM_PITCHING_H <- NULL
train_prepared_df$TEAM_PITCHING_BB <- NULL
train_prepared_df$TEAM_PITCHING_SO <- NULL
boxcox(lm(train_prepared_df$TEAM_FIELDING_E ~ 1))
train_prepared_df$TEAM_FIELDING_E_Transformed <- train_prepared_df$TEAM_FIELDING_E^(-1)
train_prepared_df$TEAM_FIELDING_E <- NULL
par(mfrow=c(1,2))
plot(density(train_prepared_df$TEAM_FIELDING_E_Transformed),main="",xlab="")
boxplot(train_prepared_df$TEAM_FIELDING_E_Transformed,main="")
train_prepared_df$TEAM_BATTING_1B <- train_prepared_df$TEAM_BATTING_H - train_prepared_df$TEAM_BATTING_2B - train_prepared_df$TEAM_BATTING_3B - train_prepared_df$TEAM_BATTING_HR
train_prepared_df$TEAM_BATTING_H <- NULL
par(mfrow=c(1,2))
plot(density(train_prepared_df$TEAM_BATTING_1B),main="",xlab="")
boxplot(train_prepared_df$TEAM_BATTING_1B,main="")
missing_df <- data.frame(train_prepared_df$TEAM_BATTING_SO,train_prepared_df$TEAM_BASERUN_SB,train_prepared_df$TEAM_BASERUN_CS, train_prepared_df$TEAM_FIELDING_DP)
(colMeans(is.na(missing_df)))*100
lm_team_bat_so <- lm(TEAM_BATTING_SO ~ . - TEAM_BASERUN_SB - TEAM_BASERUN_CS - TEAM_FIELDING_DP, data = train_prepared_df[,2:ncol(train_prepared_df)])
train_prepared_df[is.na(train_prepared_df$TEAM_BATTING_SO),]$TEAM_BATTING_SO <- predict(lm_team_bat_so,train_prepared_df[is.na(train_prepared_df$TEAM_BATTING_SO),])
lm_team_bas_sb <- lm(TEAM_BASERUN_SB ~ . - TEAM_BASERUN_CS - TEAM_FIELDING_DP, data = train_prepared_df[,2:ncol(train_prepared_df)])
train_prepared_df[is.na(train_prepared_df$TEAM_BASERUN_SB),]$TEAM_BASERUN_SB <- predict(lm_team_bas_sb,train_prepared_df[is.na(train_prepared_df$TEAM_BASERUN_SB),])
train_prepared_df[train_prepared_df$TEAM_BASERUN_SB<0,]$TEAM_BASERUN_SB <- 0
lm_team_fld_dp <- lm(TEAM_FIELDING_DP ~ . - TEAM_BASERUN_CS, data = train_prepared_df[,2:ncol(train_prepared_df)])
train_prepared_df[is.na(train_prepared_df$TEAM_FIELDING_DP),]$TEAM_FIELDING_DP <- predict(lm_team_fld_dp,train_prepared_df[is.na(train_prepared_df$TEAM_FIELDING_DP),])
lm_team_bas_cs <- lm(TEAM_BASERUN_CS ~ ., data = train_prepared_df[,2:ncol(train_prepared_df)])
train_prepared_df[is.na(train_prepared_df$TEAM_BASERUN_CS),]$TEAM_BASERUN_CS <- predict(lm_team_bas_cs,train_prepared_df[is.na(train_prepared_df$TEAM_BASERUN_CS),])
# imputed_df <- data.frame(lm_team_bat_so, lm_team_bas_sb, lm_team_fld_dp, lm_team_bas_cs)
# (colMeans(is.na(imputed_df)))*100
missing_df <- data.frame(train_prepared_df$TEAM_BATTING_SO,train_prepared_df$TEAM_BASERUN_SB,train_prepared_df$TEAM_BASERUN_CS, train_prepared_df$TEAM_FIELDING_DP)
(colMeans(is.na(missing_df)))*100
print(paste0("TEAM_BATTING_SO - R-squared:",toString(round(summary(lm_team_bat_so)$r.squared,4))))
print(paste0("TEAM_BASERUN_SB - R-squared:",toString(round(summary(lm_team_bas_sb)$r.squared,4))))
print(paste0("TEAM_BASERUN_CS - R-squared:",toString(round(summary(lm_team_bas_cs)$r.squared,4))))
print(paste0("TEAM_FIELDING_DP - R-squared:",toString(round(summary(lm_team_fld_dp)$r.squared,4))))
summary(train_prepared_df)
lm_win_full <- lm(TARGET_WINS ~ .,data = train_prepared_df)
summary(lm_win_full)
confint(lm_win_full, level = 0.95)
lm_win_eff_adj <- lm(TARGET_WINS ~ .-TEAM_BASERUN_CS,data = train_prepared_df)
summary(lm_win_eff_adj)
lm_win_eff_adj2 <- lm(TARGET_WINS ~ .-TEAM_BASERUN_CS-TEAM_FIELDING_DP,data = train_prepared_df)
summary(lm_win_eff_adj2)
lm_win_exc_mis <- lm(TARGET_WINS ~ .-TEAM_BATTING_SO-TEAM_BASERUN_SB-TEAM_BASERUN_CS-TEAM_FIELDING_DP,data = train_prepared_df)
summary(lm_win_exc_mis)
par(mfrow=c(4,4))
plot(lm_win_full)
plot(lm_win_eff_adj)
plot(lm_win_eff_adj2)
plot(lm_win_exc_mis)
anova(lm_win_exc_mis, lm_win_eff_adj2)
anova(lm_win_eff_adj2, lm_win_eff_adj)
anova(lm_win_eff_adj, lm_win_full)
data.frame(
model = c("Full model","Exclude TEAM_BASERUN_CS","EXclude TEAM_BASERUN_CS and TEAM_FIELDING_DP","Exclude variables with missing values"),     Adjusted_R_Squared = c(summary(lm_win_full)$adj.r.squared,summary(lm_win_eff_adj)$adj.r.squared,summary(lm_win_eff_adj2)$adj.r.squared,summary(lm_win_exc_mis)$adj.r.squared),
Root_Mean_Square_Deviation = c(sqrt(mean(lm_win_full$residuals^2)),sqrt(mean(lm_win_eff_adj$residuals^2)),sqrt(mean(lm_win_eff_adj2$residuals^2)),sqrt(mean(lm_win_exc_mis$residuals^2)))
)
summary(test_raw_df)
test_prepared_df <- test_raw_df
test_prepared_df$TEAM_FIELDING_E_Transformed <- test_prepared_df$TEAM_FIELDING_E^(-1)
test_prepared_df$TEAM_BATTING_1B <- test_prepared_df$TEAM_BATTING_H - test_prepared_df$TEAM_BATTING_2B - test_prepared_df$TEAM_BATTING_3B - test_prepared_df$TEAM_BATTING_HR
test_prepared_df$TEAM_BATTING_H <- NULL
test_prepared_df$TEAM_BATTING_HBP <- NULL
test_prepared_df$TEAM_PITCHING_HR <- NULL
test_prepared_df$TEAM_PITCHING_H <- NULL
test_prepared_df$TEAM_PITCHING_BB <- NULL
test_prepared_df$TEAM_PITCHING_SO <- NULL
test_prepared_df[is.na(test_prepared_df$TEAM_BATTING_SO),]$TEAM_BATTING_SO <- predict(lm_team_bat_so,test_prepared_df[is.na(test_prepared_df$TEAM_BATTING_SO),])
test_prepared_df[is.na(test_prepared_df$TEAM_BASERUN_SB),]$TEAM_BASERUN_SB <- predict(lm_team_bas_sb,test_prepared_df[is.na(test_prepared_df$TEAM_BASERUN_SB),])
test_prepared_df[test_prepared_df$TEAM_BASERUN_SB<0,]$TEAM_BASERUN_SB <- 0
test_prepared_df[is.na(test_prepared_df$TEAM_FIELDING_DP),]$TEAM_FIELDING_DP <- predict(lm_team_fld_dp,test_prepared_df[is.na(test_prepared_df$TEAM_FIELDING_DP),])
test_prepared_df[is.na(test_prepared_df$TEAM_BASERUN_CS),]$TEAM_BASERUN_CS <- predict(lm_team_bas_cs,test_prepared_df[is.na(test_prepared_df$TEAM_BASERUN_CS),])
summary(test_prepared_df)
m1_predict <- predict(lm_win_full, test_prepared_df)
m2_predict <- predict(lm_win_eff_adj, test_prepared_df)
m3_predict <- predict(lm_win_eff_adj2, test_prepared_df)
m4_predict <- predict(lm_win_exc_mis, test_prepared_df)
dist_df <- data.frame(rbind(
cbind(train_prepared_df$TARGET_WINS,"train data set"),
cbind(m1_predict,"test data model 1"),
cbind(m2_predict,"test data model 2"),
cbind(m3_predict,"test data model 3"),
cbind(m4_predict,"test data model 4")
),stringsAsFactors=FALSE)
colnames(dist_df) <- c("value","data")
dist_df$value <- as.numeric(dist_df$value)
library(ggplot2)
ggplot(dist_df, aes(x=value, color=data)) +
geom_density()
gc()
library(faraway)
data(orings)
plot (damage/6 ~ temp, orings, xlim=c(25,85), ylim = c(0,1),
xlab="Temperature",  ylab="Prob of damage")
lmod <- lm(damage/6 ~ temp, orings)
abline(lmod)
logitmod <- glm(cbind(damage,6-damage) ~ temp,
family=binomial, orings)
summary(logitmod)
plot (damage/6 ~ temp, orings, xlim=c(25,85),
ylim=c(0,1),
xlab="Temperature", ylab="Prob of damage")
x <- seq(25,85,1)
lines(x,ilogit(11.6630−0.2162*x))
x <- seq(25,85,1)
lines(x,ilogit(11.6630−0.2162*x))
ilogit?
?ilogit
?lines
plot (damage/6 ~ temp, orings, xlim=c(25,85),
ylim=c(0,1),
xlab="Temperature", ylab="Prob of damage")
x <- seq(25,85,1)
lines(x,ilogit(11.6630−0.2162*x))
lines(x = x,y = ilogit(11.6630−0.2162*x))
ilogit(11.6630−0.2162*x)
?logit
?ilogit
y = 11.6630−0.2162*x
l
y <- 11.6630−0.2162*x
lines(x,ilogit(11.6630−0.2162*x))
y <- 11.6630−0.2162*x
